import fitz
import json
import os
import glob
import re # ƒê√£ th√™m th∆∞ vi·ªán Re (Regular Expression) ƒë·ªÉ x·ª≠ l√Ω chu·ªói

# N·∫øu d√πng Gemini SDK:
from google import genai
client = genai.Client(api_key="AIzaSyDDvw6S5PQVCYmmRSxZEP97ZgWnbzvD1PA")
MODEL = "gemini-2.5-flash"

# N·∫øu b·∫°n v·∫´n mu·ªën d√πng OpenAI (n·∫øu b·∫°n c√≥ key OpenAI), gi·ªØ ph·∫ßn n√†y:
# from openai import OpenAI
# client = OpenAI(api_key="YOUR_OPENAI_KEY")
# MODEL = "gpt-4o-mini"  # ho·∫∑c model b·∫°n mu·ªën

# H√†m tr√≠ch text t·ª´ PDF
def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text("text") + "\n"
    return text.strip()

# H√†m g·ª≠i prompt + parse JSON
def extract_case_info(text):
    system_prompt = (
        "You are a medical text extraction model specialized in tropical infectious disease case reports. "
        "Extract structured patient information from the input text according to the given JSON schema."
    )
    schema = """
Return JSON in this format:
{
  "patient_information": "...",
  "chief_complaint": "...",
  "history_of_present_illness": "...",
  "exposure_and_epidemiology": "...",
  "vitals": "...",
  "physical_exam": "...",
  "labs_and_diagnostics": "...",
  "differential_diagnosis": "...",
  "management_and_clinical_course": "...",
  "final_diagnosis": "...",
  "disease_name_short": "..."
}
If a section is not present, use "Not mentioned".
"""

    prompt = (
        f"{system_prompt}\n\n{schema}\n\n"
        "Return ONLY the JSON object for the extracted data. Do not include any explanatory text or markdown code blocks (e.g., ```json...```).\n\n"
        f"TEXT:\n{text[:8000]}"
    )

    response = client.models.generate_content(
        model=MODEL,
        contents=prompt
    )

    content = response.text
    # üåü B∆Ø·ªöC S·ª¨A L·ªñI: Tr√≠ch xu·∫•t chu·ªói JSON kh·ªèi kh·ªëi m√£ Markdown
    # T√¨m ki·∫øm chu·ªói n·∫±m gi·ªØa ```json...``` ho·∫∑c ```...```
    match = re.search(r"```(?:json)?\s*(\{[\s\S]*?\})\s*```", content)
    
    if match:
        json_string = match.group(1) # L·∫•y n·ªôi dung JSON ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t
    else:
        json_string = content # N·∫øu kh√¥ng t√¨m th·∫•y code block, s·ª≠ d·ª•ng n·ªôi dung th√¥

    try:
        data = json.loads(json_string) # Th·ª≠ parse JSON ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t/l√†m s·∫°ch
        return data
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng parse JSON ƒë∆∞·ª£c (Sau khi l√†m s·∫°ch):", e)
        # N·∫øu v·∫´n l·ªói, l∆∞u output th√¥ ƒë·ªÉ debug
        return {"raw_output": content}

# H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c·∫£ folder PDF
def process_all_pdfs(pdf_folder="PDF-cases", output_folder="json-output"):
    os.makedirs(output_folder, exist_ok=True)
    pdf_paths = glob.glob(os.path.join(pdf_folder, "*.pdf"))

    if not pdf_paths:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp PDF n√†o trong th∆∞ m·ª•c: {pdf_folder}. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        return

    for pdf in pdf_paths:
        print("üìÑ Processing:", pdf)
        try:
            text = extract_text_from_pdf(pdf)
            data = extract_case_info(text)

            # L·∫•y s·ªë th·ª© t·ª± t·ª´ t√™n file PDF
            basename = os.path.basename(pdf)
            no_ext = os.path.splitext(basename)[0]
            case_num = no_ext.split("---")[0]
            json_filename = f"Case-{case_num}.json"

            out_path = os.path.join(output_folder, json_filename)
            with open(out_path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            print("‚úÖ Saved:", out_path)
        except Exception as e:
            print(f"üî• L·ªói x·ª≠ l√Ω t·ªáp {pdf}: {e}")

if __name__ == "__main__":
    process_all_pdfs()
